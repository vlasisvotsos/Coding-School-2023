@page "/employees"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@using BlazorWasm.Shared.Employee;

<style>
    #employees {
        font-family: Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

        #employees td, #employees th {
            border: 1px solid #ddd;
            padding: 8px;
        }

        #employees tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #employees tr:hover {
            background-color: #ddd;
        }

        #employees th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #04AA6D;
            color: white;
        }
</style>

<PageTitle>Employees</PageTitle>

<h3>Employees</h3>

@if (false)
{
<p>The Page Is Loading ...</p>
}
else
{
@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
<button class="btn btn-primary" @onclick="CreateItem">Create</button>
<table id="employees">
    <tr>
        <th>
            Name:
        </th>
        <th>
            Surname:
        </th>
        <th>
            Hire Date Start:
        </th>
        <th>
            Hire Date End:
        </th>
        <th>
            Sallary Per Month:
        </th>
        <th>
            Employee Type:
        </th>
        <th>
            Action:
        </th>
    </tr>
    @foreach (EmployeesDto employeesDto in EmployeeList)
    {
            <tr>
                <th>
                    <input type="text" placeholder="Name" @bind="employeesDto.Name" />
                </th>
                <th>
                    <input type="text" placeholder="Surname" @bind="employeesDto.Surname" />
                </th>
                <th>
                    <input type="text" placeholder="Hire Date Start" @bind="employeesDto.HiretDateStart" />
                </th>
                <th>
                    <input type="text" placeholder="Hire Date End" @bind="employeesDto.HireDateEnd" />
                </th>
                <th>
                <input type="text" placeholder="Sallary Per Month" @bind="employeesDto.SallaryPerMonth" />
                </th>
                <th>
                <input type="text" placeholder=" Employee Type" @bind="employeesDto.EmployeeType" />
                </th>
                <th>
                <button class="btn btn-primary" @onclick="()=> EditEmployee(employeesDto)">Edit</button>
                <button class="btn btn-danger" @onclick="()=> DeleteEmployee(employeesDto)">Delete</button>
                </th>
            </tr>
    }
</table>
}

@code {
    bool isLoading = true;
    string errorMessage = null;
    private List<EmployeesDto> EmployeeList = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        EmployeeList = await httpClient.GetFromJsonAsync<List<EmployeesDto>>("Employee");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("/employees/employeeedit");
    }

    private void EditEmployee(EmployeesDto employeeDto)
    {
        navigationManager.NavigateTo($"/employees/employeeedit/{employeeDto.ID}");
    }

    private async Task DeleteEmployee(EmployeesDto employeeDto)
    {
        errorMessage = null;
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Employee. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"Employee/{employeeDto.ID}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }
}
