@page "/items"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@using BlazorWasm.Shared.Items;

<style>
    #items {
        font-family: Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

        #items td, #items th {
            border: 1px solid #ddd;
            padding: 8px;
        }

        #items tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #items tr:hover {
            background-color: #ddd;
        }

        #items th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #04AA6D;
            color: white;
        }
</style>

<PageTitle>Items</PageTitle>
<h3>Items</h3>

@if (isLoading)
{
<p>The Page Is Loading ...</p>
}
else
{
@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
    <button class="btn btn-primary" @onclick="CreateItem">Create</button>
<table id="items">
    <tr>
        <th>
            Code:
        </th>
        <th>
            Description:
        </th>
        <th>
            Item Type:
        </th>
        <th>
            Price:
        </th>
        <th>
            Cost:
        </th>
        <th>
            Action:
        </th>
    </tr>
    @foreach (ItemsDto itemsDto in ItemList)
    {
            <tr>
                <th>
                    <input type="text" placeholder="Code" @bind="itemsDto.Code" readonly />
                </th>
                <th>
                    <input type="text" placeholder="Description" @bind="itemsDto.Description" readonly />
                </th>
                <th>
                    <input type="text" placeholder="Item Type" @bind="itemsDto.ItemType" readonly />
                </th>
                <th>
                    <input type="text" placeholder="Price" @bind="itemsDto.Price" readonly />
                </th>
                <th>
                    <input type="text" placeholder="Cost" @bind="itemsDto.Cost" readonly />
                </th>
                <th>
                <button class="btn btn-primary" @onclick="()=> EditItem(itemsDto)">Edit</button>
                <button class="btn btn-danger" @onclick="()=> DeleteItem(itemsDto)">Delete</button>
                </th>
            </tr>
    }
</table>
}

@code {
    bool isLoading = true;
    string errorMessage = null;
    List<ItemsDto> ItemList = new List<ItemsDto>();
    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        ItemList = await httpClient.GetFromJsonAsync<List<ItemsDto>>("api/Items");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("/Items/ItemEdit");
    }

    private void EditItem(ItemsDto itemsDto)
    {
        navigationManager.NavigateTo($"/Items/ItemEdit/{itemsDto.ID}");
    }

    private async Task DeleteItem(ItemsDto itemsDto)
    {
        errorMessage = null;
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"api/Items/{itemsDto.ID}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }
}
