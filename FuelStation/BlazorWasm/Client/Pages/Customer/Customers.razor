@page "/customers"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<style>
    #customers {
        font-family: Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

        #customers td, #customers th {
            border: 1px solid #ddd;
            padding: 8px;
        }

        #customers tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #customers tr:hover {
            background-color: #ddd;
        }

        #customers th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #04AA6D;
            color: white;
        }
</style>

<PageTitle>Customers</PageTitle>

<h3>Customers</h3>


@if (isLoading)
{
    <p>The Page Is Loading ...</p>
}
else
{
    @if (errorMessage != null)
    {
        <p class="text-danger">@errorMessage</p>
    }
    <button class="btn btn-primary" @onclick="CreateItem">Create</button>
<table id="customers">
    <tr>
        <th>
            Card Number:
        </th>
        <th>
            Name:
        </th>
        <th>
            Surname:
        </th>
        <th>
            Action:
        </th>
    </tr>
    @foreach (var customerDto in CustomersList)
    {
        <tr>
            <th>
                    <input type="text" placeholder="Card Number" @bind="customerDto.CardNumber" readonly />
            </th>
            <th>
                    <input type="text" placeholder="Name" @bind="customerDto.Name" readonly />
            </th>
            <th>
                    <input type="text" placeholder="Surname" @bind="customerDto.Surname" readonly />
            </th>
            <th>
                <button class="btn btn-primary" @onclick="()=> EditCustomer(customerDto)">Edit</button>
                <button class="btn btn-danger" @onclick="()=> DeleteCustomer(customerDto)">Delete</button>
            </th>
        </tr>
    }
</table>
}

@code {
    bool isLoading = true;
    string errorMessage = null;
    private List<CustomerDto> CustomersList = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }
    
    private async Task LoadItemsFromServer()
    {
        CustomersList = await httpClient.GetFromJsonAsync<List<CustomerDto>>("api/Customer");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("/customers/customeredit");
    }

    private void EditCustomer(CustomerDto customerDto)
    {
        navigationManager.NavigateTo($"customers/customeredit/{customerDto.ID}");
    }

    private async Task DeleteCustomer(CustomerDto customerDto)
    {
        errorMessage = null;
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Customer. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"api/Customer/{customerDto.ID}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }
}